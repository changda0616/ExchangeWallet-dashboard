/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExchangeStakePool,
  ExchangeStakePoolInterface,
} from "../../ExchangeStakePool.sol/ExchangeStakePool";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "exchangeManage",
    outputs: [
      {
        internalType: "contract ExchangeManage",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_exchangeManage",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userStakes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b5061001d61002a565b61002561002a565b6100e9565b600054610100900460ff16156100965760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100e7576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611197610120600039600081816103da0152818161041a015281816104b9015281816104f9015261058c01526111976000f3fe6080604052600436106100c25760003560e01c80638129fc1c1161007f578063a694fc3a11610059578063a694fc3a146101f1578063c0c53b8b14610211578063f2fde38b14610231578063fc0c546a1461025157600080fd5b80638129fc1c146101915780638da5cb5b146101a65780638da7ad23146101c457600080fd5b8063068150b8146100c75780632e17de78146101045780633659cfe6146101265780634f1ef2861461014657806352d1902d14610159578063715018a61461017c575b600080fd5b3480156100d357600080fd5b5060ca546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011057600080fd5b5061012461011f366004610e26565b610271565b005b34801561013257600080fd5b50610124610141366004610e5b565b6103d0565b610124610154366004610e8c565b6104af565b34801561016557600080fd5b5061016e61057f565b6040519081526020016100fb565b34801561018857600080fd5b50610124610632565b34801561019d57600080fd5b50610124610646565b3480156101b257600080fd5b506033546001600160a01b03166100e7565b3480156101d057600080fd5b5061016e6101df366004610e5b565b60cb6020526000908152604090205481565b3480156101fd57600080fd5b5061012461020c366004610e26565b610757565b34801561021d57600080fd5b5061012461022c366004610f4e565b610864565b34801561023d57600080fd5b5061012461024c366004610e5b565b610934565b34801561025d57600080fd5b5060c9546100e7906001600160a01b031681565b33600090815260cb60205260409020548111156102c95760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f756768207374616b657360781b60448201526064015b60405180910390fd5b33600090815260cb6020526040812080548392906102e8908490610fa7565b909155505060c95460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561033e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103629190610fba565b6103a05760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016102c0565b604051819033907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7590600090a350565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104185760405162461bcd60e51b81526004016102c090610fe3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661046160008051602061111b833981519152546001600160a01b031690565b6001600160a01b0316146104875760405162461bcd60e51b81526004016102c09061102f565b610490816109aa565b604080516000808252602082019092526104ac918391906109b2565b50565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104f75760405162461bcd60e51b81526004016102c090610fe3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661054060008051602061111b833981519152546001600160a01b031690565b6001600160a01b0316146105665760405162461bcd60e51b81526004016102c09061102f565b61056f826109aa565b61057b828260016109b2565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461061f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016102c0565b5060008051602061111b83398151915290565b61063a610b22565b6106446000610b7c565b565b600054610100900460ff16158080156106665750600054600160ff909116105b806106805750303b158015610680575060005460ff166001145b6106e35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102c0565b6000805460ff191660011790558015610706576000805461ff0019166101001790555b61070f33610b7c565b80156104ac576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b33600090815260cb60205260408120805483929061077690849061107b565b909155505060c9546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190610fba565b6108345760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016102c0565b604051819033907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90600090a350565b604051630b6d9e5360e21b81526001600160a01b0384811660048301528381166024830152821690632db6794c90604401602060405180830381865afa1580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d69190610fba565b6108fc5760405162461bcd60e51b815260206004820152600060248201526044016102c0565b61090583610b7c565b60c980546001600160a01b039384166001600160a01b03199182161790915560ca805492909316911617905550565b61093c610b22565b6001600160a01b0381166109a15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c0565b6104ac81610b7c565b6104ac610b22565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156109ea576109e583610bce565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a44575060408051601f3d908101601f19168201909252610a419181019061108e565b60015b610aa75760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016102c0565b60008051602061111b8339815191528114610b165760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016102c0565b506109e5838383610c6a565b6033546001600160a01b031633146106445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c0565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381163b610c3b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102c0565b60008051602061111b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610c7383610c95565b600082511180610c805750805b156109e557610c8f8383610cd5565b50505050565b610c9e81610bce565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610cfa838360405180606001604052806027815260200161113b60279139610d03565b90505b92915050565b6060600080856001600160a01b031685604051610d2091906110cb565b600060405180830381855af49150503d8060008114610d5b576040519150601f19603f3d011682016040523d82523d6000602084013e610d60565b606091505b5091509150610d7186838387610d7b565b9695505050505050565b60608315610dea578251600003610de3576001600160a01b0385163b610de35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102c0565b5081610df4565b610df48383610dfc565b949350505050565b815115610e0c5781518083602001fd5b8060405162461bcd60e51b81526004016102c091906110e7565b600060208284031215610e3857600080fd5b5035919050565b80356001600160a01b0381168114610e5657600080fd5b919050565b600060208284031215610e6d57600080fd5b610cfa82610e3f565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610e9f57600080fd5b610ea883610e3f565b9150602083013567ffffffffffffffff80821115610ec557600080fd5b818501915085601f830112610ed957600080fd5b813581811115610eeb57610eeb610e76565b604051601f8201601f19908116603f01168101908382118183101715610f1357610f13610e76565b81604052828152886020848701011115610f2c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080600060608486031215610f6357600080fd5b610f6c84610e3f565b9250610f7a60208501610e3f565b9150610f8860408501610e3f565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b81810381811115610cfd57610cfd610f91565b600060208284031215610fcc57600080fd5b81518015158114610fdc57600080fd5b9392505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b80820180821115610cfd57610cfd610f91565b6000602082840312156110a057600080fd5b5051919050565b60005b838110156110c25781810151838201526020016110aa565b50506000910152565b600082516110dd8184602087016110a7565b9190910192915050565b60208152600082518060208401526111068160408501602087016110a7565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203bda19c4616e57701259509a1c6dc7723545d0c3143db838895298456b05402364736f6c63430008130033";

type ExchangeStakePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeStakePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeStakePool__factory extends ContractFactory {
  constructor(...args: ExchangeStakePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ExchangeStakePool> {
    return super.deploy(overrides || {}) as Promise<ExchangeStakePool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ExchangeStakePool {
    return super.attach(address) as ExchangeStakePool;
  }
  override connect(signer: Signer): ExchangeStakePool__factory {
    return super.connect(signer) as ExchangeStakePool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeStakePoolInterface {
    return new utils.Interface(_abi) as ExchangeStakePoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExchangeStakePool {
    return new Contract(address, _abi, signerOrProvider) as ExchangeStakePool;
  }
}
