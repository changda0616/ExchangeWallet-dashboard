/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface WalletAbiInterface extends utils.Interface {
  functions: {
    "addRecoveryAddress(address)": FunctionFragment;
    "checkBalance()": FunctionFragment;
    "confirmRecovery()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isRecoveryAddress(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeRecoveryAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startRecovery()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRecoveryAddress"
      | "checkBalance"
      | "confirmRecovery"
      | "initialize"
      | "isRecoveryAddress"
      | "owner"
      | "proxiableUUID"
      | "removeRecoveryAddress"
      | "renounceOwnership"
      | "startRecovery"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRecoveryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRecoveryAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeRecoveryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRecoveryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRecoveryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRecoveryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnerRecovered(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RecoveryAddressAdded(address)": EventFragment;
    "RecoveryAddressConfirmed(address)": EventFragment;
    "RecoveryAddressRemoved(address)": EventFragment;
    "RecoveryStarted(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRecovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryAddressConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryAddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DepositEventObject {
  _from: string;
  _value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnerRecoveredEventObject {
  _oldOwner: string;
  _newOwner: string;
}
export type OwnerRecoveredEvent = TypedEvent<
  [string, string],
  OwnerRecoveredEventObject
>;

export type OwnerRecoveredEventFilter = TypedEventFilter<OwnerRecoveredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RecoveryAddressAddedEventObject {
  _recoveryAddress: string;
}
export type RecoveryAddressAddedEvent = TypedEvent<
  [string],
  RecoveryAddressAddedEventObject
>;

export type RecoveryAddressAddedEventFilter =
  TypedEventFilter<RecoveryAddressAddedEvent>;

export interface RecoveryAddressConfirmedEventObject {
  _recoveryAddress: string;
}
export type RecoveryAddressConfirmedEvent = TypedEvent<
  [string],
  RecoveryAddressConfirmedEventObject
>;

export type RecoveryAddressConfirmedEventFilter =
  TypedEventFilter<RecoveryAddressConfirmedEvent>;

export interface RecoveryAddressRemovedEventObject {
  _recoveryAddress: string;
}
export type RecoveryAddressRemovedEvent = TypedEvent<
  [string],
  RecoveryAddressRemovedEventObject
>;

export type RecoveryAddressRemovedEventFilter =
  TypedEventFilter<RecoveryAddressRemovedEvent>;

export interface RecoveryStartedEventObject {
  _recoveryAddress: string;
}
export type RecoveryStartedEvent = TypedEvent<
  [string],
  RecoveryStartedEventObject
>;

export type RecoveryStartedEventFilter = TypedEventFilter<RecoveryStartedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawalEventObject {
  _to: string;
  _value: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface WalletAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WalletAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRecoveryAddress(
      _recoveryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    confirmRecovery(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isRecoveryAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeRecoveryAddress(
      _recoveryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startRecovery(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addRecoveryAddress(
    _recoveryAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkBalance(overrides?: CallOverrides): Promise<BigNumber>;

  confirmRecovery(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isRecoveryAddress(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeRecoveryAddress(
    _recoveryAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startRecovery(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRecoveryAddress(
      _recoveryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    confirmRecovery(overrides?: CallOverrides): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isRecoveryAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeRecoveryAddress(
      _recoveryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startRecovery(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Deposit(address,uint256)"(
      _from?: string | null,
      _value?: null
    ): DepositEventFilter;
    Deposit(_from?: string | null, _value?: null): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnerRecovered(address,address)"(
      _oldOwner?: string | null,
      _newOwner?: string | null
    ): OwnerRecoveredEventFilter;
    OwnerRecovered(
      _oldOwner?: string | null,
      _newOwner?: string | null
    ): OwnerRecoveredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RecoveryAddressAdded(address)"(
      _recoveryAddress?: string | null
    ): RecoveryAddressAddedEventFilter;
    RecoveryAddressAdded(
      _recoveryAddress?: string | null
    ): RecoveryAddressAddedEventFilter;

    "RecoveryAddressConfirmed(address)"(
      _recoveryAddress?: string | null
    ): RecoveryAddressConfirmedEventFilter;
    RecoveryAddressConfirmed(
      _recoveryAddress?: string | null
    ): RecoveryAddressConfirmedEventFilter;

    "RecoveryAddressRemoved(address)"(
      _recoveryAddress?: string | null
    ): RecoveryAddressRemovedEventFilter;
    RecoveryAddressRemoved(
      _recoveryAddress?: string | null
    ): RecoveryAddressRemovedEventFilter;

    "RecoveryStarted(address)"(
      _recoveryAddress?: string | null
    ): RecoveryStartedEventFilter;
    RecoveryStarted(
      _recoveryAddress?: string | null
    ): RecoveryStartedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Withdrawal(address,uint256)"(
      _to?: string | null,
      _value?: null
    ): WithdrawalEventFilter;
    Withdrawal(_to?: string | null, _value?: null): WithdrawalEventFilter;
  };

  estimateGas: {
    addRecoveryAddress(
      _recoveryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkBalance(overrides?: CallOverrides): Promise<BigNumber>;

    confirmRecovery(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isRecoveryAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeRecoveryAddress(
      _recoveryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startRecovery(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRecoveryAddress(
      _recoveryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmRecovery(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isRecoveryAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRecoveryAddress(
      _recoveryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startRecovery(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
