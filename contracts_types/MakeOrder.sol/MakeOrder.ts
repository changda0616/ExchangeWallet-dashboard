/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface MakeOrderInterface extends utils.Interface {
  functions: {
    "PRICE_DECIMASL()": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "exchangeManage()": FunctionFragment;
    "executeOrder(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "liabilities(address,address)": FunctionFragment;
    "orderCount()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "placeOrder(uint8,address,address,uint256,uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PRICE_DECIMASL"
      | "cancelOrder"
      | "exchangeManage"
      | "executeOrder"
      | "initialize()"
      | "initialize(address)"
      | "liabilities"
      | "orderCount"
      | "orders"
      | "owner"
      | "placeOrder"
      | "proxiableUUID"
      | "renounceOwnership"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PRICE_DECIMASL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeManage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liabilities",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeOrder",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "PRICE_DECIMASL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeManage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OrderCancelled(uint256,address,uint8)": EventFragment;
    "OrderExecuted(uint256,address,uint8)": EventFragment;
    "OrderPlaced(uint256,address,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OrderCancelledEventObject {
  id: BigNumber;
  trader: string;
  orderType: number;
}
export type OrderCancelledEvent = TypedEvent<
  [BigNumber, string, number],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderExecutedEventObject {
  id: BigNumber;
  trader: string;
  orderType: number;
}
export type OrderExecutedEvent = TypedEvent<
  [BigNumber, string, number],
  OrderExecutedEventObject
>;

export type OrderExecutedEventFilter = TypedEventFilter<OrderExecutedEvent>;

export interface OrderPlacedEventObject {
  id: BigNumber;
  trader: string;
  orderType: number;
}
export type OrderPlacedEvent = TypedEvent<
  [BigNumber, string, number],
  OrderPlacedEventObject
>;

export type OrderPlacedEventFilter = TypedEventFilter<OrderPlacedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface MakeOrder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MakeOrderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRICE_DECIMASL(overrides?: CallOverrides): Promise<[number]>;

    cancelOrder(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exchangeManage(overrides?: CallOverrides): Promise<[string]>;

    executeOrder(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _exchangeManage: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liabilities(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string, BigNumber, BigNumber, boolean] & {
        orderType: number;
        trader: string;
        baseToken: string;
        quoteToken: string;
        amount: BigNumber;
        price: BigNumber;
        executed: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeOrder(
      orderType: BigNumberish,
      baseToken: string,
      quoteToken: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  PRICE_DECIMASL(overrides?: CallOverrides): Promise<number>;

  cancelOrder(
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exchangeManage(overrides?: CallOverrides): Promise<string>;

  executeOrder(
    id: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _exchangeManage: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liabilities(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orderCount(overrides?: CallOverrides): Promise<BigNumber>;

  orders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string, BigNumber, BigNumber, boolean] & {
      orderType: number;
      trader: string;
      baseToken: string;
      quoteToken: string;
      amount: BigNumber;
      price: BigNumber;
      executed: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  placeOrder(
    orderType: BigNumberish,
    baseToken: string,
    quoteToken: string,
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    PRICE_DECIMASL(overrides?: CallOverrides): Promise<number>;

    cancelOrder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeManage(overrides?: CallOverrides): Promise<string>;

    executeOrder(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _exchangeManage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liabilities(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderCount(overrides?: CallOverrides): Promise<BigNumber>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, string, BigNumber, BigNumber, boolean] & {
        orderType: number;
        trader: string;
        baseToken: string;
        quoteToken: string;
        amount: BigNumber;
        price: BigNumber;
        executed: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    placeOrder(
      orderType: BigNumberish,
      baseToken: string,
      quoteToken: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OrderCancelled(uint256,address,uint8)"(
      id?: BigNumberish | null,
      trader?: string | null,
      orderType?: BigNumberish | null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      id?: BigNumberish | null,
      trader?: string | null,
      orderType?: BigNumberish | null
    ): OrderCancelledEventFilter;

    "OrderExecuted(uint256,address,uint8)"(
      id?: BigNumberish | null,
      trader?: string | null,
      orderType?: BigNumberish | null
    ): OrderExecutedEventFilter;
    OrderExecuted(
      id?: BigNumberish | null,
      trader?: string | null,
      orderType?: BigNumberish | null
    ): OrderExecutedEventFilter;

    "OrderPlaced(uint256,address,uint8)"(
      id?: BigNumberish | null,
      trader?: string | null,
      orderType?: BigNumberish | null
    ): OrderPlacedEventFilter;
    OrderPlaced(
      id?: BigNumberish | null,
      trader?: string | null,
      orderType?: BigNumberish | null
    ): OrderPlacedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    PRICE_DECIMASL(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exchangeManage(overrides?: CallOverrides): Promise<BigNumber>;

    executeOrder(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "initialize(address)"(
      _exchangeManage: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liabilities(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderCount(overrides?: CallOverrides): Promise<BigNumber>;

    orders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeOrder(
      orderType: BigNumberish,
      baseToken: string,
      quoteToken: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRICE_DECIMASL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOrder(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exchangeManage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeOrder(
      id: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _exchangeManage: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liabilities(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeOrder(
      orderType: BigNumberish,
      baseToken: string,
      quoteToken: string,
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
